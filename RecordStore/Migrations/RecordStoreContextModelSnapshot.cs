// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RecordStore.Models;

namespace RecordStore.Migrations
{
    [DbContext(typeof(RecordStoreContext))]
    partial class RecordStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("RecordStore.Models.Album", b =>
                {
                    b.Property<int>("AlbumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AlbumName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ArtistName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Year")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("AlbumId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("RecordStore.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("GenreName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("RecordStore.Models.GenreAlbumSong", b =>
                {
                    b.Property<int>("GenreAlbumSongId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AlbumId")
                        .HasColumnType("int");

                    b.Property<int?>("GenreId")
                        .HasColumnType("int");

                    b.Property<int?>("SongId")
                        .HasColumnType("int");

                    b.HasKey("GenreAlbumSongId");

                    b.HasIndex("AlbumId");

                    b.HasIndex("GenreId");

                    b.HasIndex("SongId");

                    b.ToTable("GenreAlbumSongs");
                });

            modelBuilder.Entity("RecordStore.Models.Song", b =>
                {
                    b.Property<int>("SongId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("SongName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("SongId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("RecordStore.Models.GenreAlbumSong", b =>
                {
                    b.HasOne("RecordStore.Models.Album", "Album")
                        .WithMany("JoinEntries")
                        .HasForeignKey("AlbumId");

                    b.HasOne("RecordStore.Models.Genre", "Genre")
                        .WithMany("Albums")
                        .HasForeignKey("GenreId");

                    b.HasOne("RecordStore.Models.Song", "Song")
                        .WithMany("Albums")
                        .HasForeignKey("SongId");

                    b.Navigation("Album");

                    b.Navigation("Genre");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("RecordStore.Models.Album", b =>
                {
                    b.Navigation("JoinEntries");
                });

            modelBuilder.Entity("RecordStore.Models.Genre", b =>
                {
                    b.Navigation("Albums");
                });

            modelBuilder.Entity("RecordStore.Models.Song", b =>
                {
                    b.Navigation("Albums");
                });
#pragma warning restore 612, 618
        }
    }
}
